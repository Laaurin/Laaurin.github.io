{"version":3,"file":"js/775.69251656.js","mappings":"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","sources":["webpack://multiple-choice/./src/views/UploadView.vue","webpack://multiple-choice/./src/views/UploadView.vue?6d82"],"sourcesContent":["<template>\n  <div>\n    <div>\n      <div>\n        <the-side-bar>\n          <div class=\"\">\n            <button\n              class=\"btn my-button button-text\"\n              @click=\"selectedComponent = 'multiple-choice'\"\n            >\n              Multiple Choice\n            </button>\n          </div>\n          <div class=\"button-outer\">\n            <button\n              class=\"btn my-button button-text\"\n              @click=\"selectedComponent = 'flash-card'\"\n            >\n              Flashcard\n            </button>\n          </div>\n        </the-side-bar>\n      </div>\n      <div class=\"d-flex justify-content-center align-items-center\" :style=\"{'margin-left': sidebarWidth}\" style=\"height: calc(100dvh - 100px)\">\n        <multiple-choice-question-builder\n          v-if=\"selectedComponent === 'multiple-choice'\"\n          :uploading=\"true\"\n          @return-question=\"submitQuestion\"\n        >\n        </multiple-choice-question-builder>\n        <flash-card-builder\n          v-else-if=\"selectedComponent === 'flash-card'\"\n          :uploading=\"true\"\n          @return-question=\"submitQuestion\"\n        >\n        </flash-card-builder>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { computed, ref } from \"vue\";\nimport MultipleChoiceQuestionBuilder from \"@/components/upload/MultipleChoiceQuestionBuilder.vue\";\nimport FlashCardBuilder from \"@/components/upload/FlashCardBuilder.vue\";\nimport SideBar from \"@/components/UI/SideBar/SideBar.vue\";\nimport TheSideBar from \"@/components/UI/SideBar/TheSideBar.vue\";\nimport { useStore } from \"vuex\";\n\nexport default {\n  components: {\n    TheSideBar,\n    SideBar,\n    FlashCardBuilder,\n    MultipleChoiceQuestionBuilder,\n  },\n  setup() {\n    const store = useStore();\n    const selectedComponent = ref(\"multiple-choice\");\n    const questionText = ref(\"\");\n    const answerOptions = ref([\n      { text: \"\" },\n      { text: \"\" },\n      { text: \"\" },\n      { text: \"\" },\n    ]);\n    const correctAnswerIndex = ref(null);\n    const isPrivateQuestion = ref(false);\n    const questionLabels = ref([]);\n    const addedLabels = ref([]);\n    const sidebarWidth = computed(() => store.getters.getSidebarWidth)\n    return {\n      selectedComponent,\n      questionText,\n      answerOptions,\n      questionLabels,\n      correctAnswerIndex,\n      isPrivateQuestion,\n      addedLabels,\n      sidebarWidth\n    };\n  },\n  methods: {\n    async submitQuestion(questionObject, addedLabels) {\n      delete questionObject.id;\n      questionObject.questionLabels = await this.saveNewLabelsToTeam(\n        addedLabels,\n        questionObject.questionLabels\n      );\n      console.log(questionObject);\n      //const dataObj = this.createQuestion(questionObject);\n      //console.log(dataObj);\n      await this.$store.dispatch(\"uploadPrivateQuestion\", questionObject);\n    },\n\n    addLabel(labelObject) {\n      //this.teamLabels.push(labelObject);\n      this.addedLabels.push(labelObject);\n    },\n\n    async submitForm() {\n      if (this.correctAnswerIndex === null) {\n        alert(\"Please select the correct answer!\");\n        return;\n      }\n\n      if (this.isPrivateQuestion) {\n        await this.saveNewLabelsToTeam();\n        const dataObj = await this.createQuestion();\n        console.log(dataObj);\n        await this.$store.dispatch(\"uploadPrivateQuestion\", dataObj);\n      } else {\n        const dataObj = await this.createQuestion();\n        console.log(dataObj);\n        await this.$store.dispatch(\"uploadPublicQuestion\", dataObj);\n      }\n\n      // Optional: Zur端cksetzen der Formularfelder nach dem Hinzuf端gen der Frage\n      this.questionText = \"\";\n      this.answerOptions.forEach((answer) => (answer.text = \"\"));\n      this.correctAnswerIndex = null;\n      this.isPrivateQuestion = false;\n      this.questionLabels = [];\n      this.addedLabels = [];\n    },\n\n    async createQuestion() {\n      const dataObj = {\n        questionText: this.questionText,\n        answerOptions: this.answerOptions.map((answer, index) => {\n          return {\n            text: answer.text,\n            isCorrect: index === this.correctAnswerIndex,\n          };\n        }),\n      };\n\n      if (this.isPrivateQuestion) {\n        // F端ge die Labels zur Frage hinzu\n        dataObj.questionLabels = this.questionLabels.map((labelObject) => {\n          return {\n            label: labelObject.label,\n            id: labelObject.id,\n          };\n        });\n      }\n\n      return dataObj;\n    },\n\n    async saveNewLabelsToTeam(addedLabels, questionLabels) {\n      console.log(\"adding labels...\");\n      for (const labelObject of addedLabels) {\n        const id = await this.$store.dispatch(\n          \"addNewLabelToTeamLabels\",\n          labelObject.label\n        );\n        const index = questionLabels.findIndex(\n          (label) => label.label === labelObject.label\n        );\n\n        if (index !== -1) {\n          // Aktualisiere die ID des Labels\n          questionLabels[index].id = id;\n        }\n      }\n      return questionLabels;\n    },\n\n    toggleLabel(labelName) {\n      if (this.questionLabels.includes(labelName)) {\n        this.questionLabels = this.questionLabels.filter(\n          (label) => label !== labelName\n        );\n      } else {\n        this.questionLabels.push(labelName);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.col-3 {\n  padding-left: 0;\n}\n\n.button-text {\n  color: whitesmoke;\n  text-align: left;\n}\n\n.button-outer {\n  margin-left: 1rem;\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n}\n\n.my-button {\n  width: 100%;\n  text-align: left;\n  padding: 0;\n  position: relative; /* Position f端r das Pseudo-Element */\n}\n\n.my-button::before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 1px;\n  background-color: #ccc; /* Farbe der Trennlinie */\n}\n\n.container {\n  max-width: 500px;\n  margin: 5rem auto auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 0.5rem;\n}\n\nh2 {\n  text-align: center;\n}\n\n.answer-label {\n  font-size: 18px;\n}\n\n.question-input-wrapper {\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n}\n\ninput[type=\"text\"] {\n  flex: 1;\n  font-size: 16px;\n  padding: 8px;\n  margin-left: 10px;\n  margin-right: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.option-input-wrapper {\n  display: flex;\n  grid-template-columns: auto 1fr; /* data und Eingabe in einer Zeile mit Grid-Layout */\n  align-items: center;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.label-list {\n  display: flex;\n  flex-wrap: wrap; /* Labels in mehreren Zeilen anzeigen */\n  align-items: center; /* Vertikal ausrichten */\n  margin-top: 10px; /* Abstand oben */\n}\n\n.label-wrapper {\n  margin-right: 10px; /* Abstand zwischen den Labels */\n}\n</style>\n","import { render } from \"./UploadView.vue?vue&type=template&id=5c64efd8&scoped=true\"\nimport script from \"./UploadView.vue?vue&type=script&lang=js\"\nexport * from \"./UploadView.vue?vue&type=script&lang=js\"\n\nimport \"./UploadView.vue?vue&type=style&index=0&id=5c64efd8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-5c64efd8\"]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_createElementVNode","_createVNode","_component_the_side_bar","_hoisted_1","onClick","_cache","$event","$setup","selectedComponent","_hoisted_2","style","_normalizeStyle","sidebarWidth","_createBlock","_component_multiple_choice_question_builder","uploading","onReturnQuestion","$options","submitQuestion","_component_flash_card_builder","components","TheSideBar","SideBar","FlashCardBuilder","MultipleChoiceQuestionBuilder","setup","store","useStore","ref","questionText","answerOptions","text","correctAnswerIndex","isPrivateQuestion","questionLabels","addedLabels","computed","getters","getSidebarWidth","methods","questionObject","id","this","saveNewLabelsToTeam","console","log","$store","dispatch","addLabel","labelObject","push","submitForm","dataObj","createQuestion","forEach","answer","alert","map","index","isCorrect","label","findIndex","toggleLabel","labelName","includes","filter","__exports__","render"],"sourceRoot":""}