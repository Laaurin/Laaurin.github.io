{"version":3,"file":"js/891.f9fa0ba0.js","mappings":"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","sources":["webpack://multiple-choice/./src/views/UploadView.vue","webpack://multiple-choice/./src/views/UploadView.vue?6d82"],"sourcesContent":["<template>\n  <div>\n    <button @click=\"selectedComponent = 'multiple-choice'\">\n      multiple choice\n    </button>\n    <button @click=\"selectedComponent = 'flash-card'\">flashcard</button>\n  </div>\n  <multiple-choice-question-builder\n    v-if=\"selectedComponent === 'multiple-choice'\"\n    :uploading=\"true\"\n    @return-question=\"submitQuestion\"\n  >\n  </multiple-choice-question-builder>\n  <flash-card-builder\n    v-else-if=\"selectedComponent === 'flash-card'\"\n    :uploading=\"true\"\n    @return-question=\"submitQuestion\"\n  >\n  </flash-card-builder>\n</template>\n\n<script>\nimport { computed, ref } from \"vue\";\nimport { useStore } from \"vuex\";\nimport MultipleChoiceQuestionBuilder from \"@/components/upload/MultipleChoiceQuestionBuilder.vue\";\nimport FlashCardBuilder from \"@/components/upload/FlashCardBuilder.vue\";\n\nexport default {\n  components: {\n    FlashCardBuilder,\n    MultipleChoiceQuestionBuilder,\n  },\n  setup() {\n    const selectedComponent = ref(\"multiple-choice\");\n    const questionText = ref(\"\");\n    const answerOptions = ref([\n      { text: \"\" },\n      { text: \"\" },\n      { text: \"\" },\n      { text: \"\" },\n    ]);\n    const correctAnswerIndex = ref(null);\n    const isPrivateQuestion = ref(false);\n    const questionLabels = ref([]);\n    const addedLabels = ref([]);\n    const store = useStore();\n    const isLoggedIn = computed(() => store.getters.isLoggedIn);\n    const teamLabels = computed(() => store.getters.getTeamLabels);\n    const displayLabels = computed(() =>\n      teamLabels.value.concat(addedLabels.value)\n    );\n    return {\n      selectedComponent,\n      isLoggedIn,\n      teamLabels,\n      questionText,\n      answerOptions,\n      questionLabels,\n      correctAnswerIndex,\n      isPrivateQuestion,\n      addedLabels,\n      displayLabels,\n    };\n  },\n  methods: {\n    async submitQuestion(questionObject, addedLabels) {\n      delete questionObject.id;\n      questionObject.questionLabels = await this.saveNewLabelsToTeam(\n        addedLabels,\n        questionObject.questionLabels\n      );\n      console.log(questionObject);\n      //const dataObj = this.createQuestion(questionObject);\n      //console.log(dataObj);\n      await this.$store.dispatch(\"uploadPrivateQuestion\", questionObject);\n    },\n\n    addLabel(labelObject) {\n      //this.teamLabels.push(labelObject);\n      this.addedLabels.push(labelObject);\n    },\n\n    async submitForm() {\n      // Validieren, ob eine richtige Antwort ausgewählt wurde\n      if (this.correctAnswerIndex === null) {\n        alert(\"Bitte wählen Sie eine richtige Antwort aus.\");\n        return;\n      }\n\n      if (this.isPrivateQuestion) {\n        await this.saveNewLabelsToTeam();\n        const dataObj = this.createQuestion();\n        console.log(dataObj);\n        await this.$store.dispatch(\"uploadPrivateQuestion\", dataObj);\n      } else {\n        const dataObj = this.createQuestion();\n        console.log(dataObj);\n        await this.$store.dispatch(\"uploadPublicQuestion\", dataObj);\n      }\n\n      // Optional: Zurücksetzen der Formularfelder nach dem Hinzufügen der Frage\n      this.questionText = \"\";\n      this.answerOptions.forEach((answer) => (answer.text = \"\"));\n      this.correctAnswerIndex = null;\n      this.isPrivateQuestion = false;\n      this.questionLabels = [];\n      this.addedLabels = [];\n    },\n\n    createQuestion() {\n      const dataObj = {\n        questionText: this.questionText,\n        answerOptions: this.answerOptions.map((answer, index) => {\n          return {\n            text: answer.text,\n            isCorrect: index === this.correctAnswerIndex,\n          };\n        }),\n      };\n\n      if (this.isPrivateQuestion) {\n        // Füge die Labels zur Frage hinzu\n        dataObj.questionLabels = this.questionLabels.map((labelObject) => {\n          return {\n            label: labelObject.label,\n            id: labelObject.id,\n          };\n        });\n      }\n\n      return dataObj;\n    },\n\n    async saveNewLabelsToTeam(addedLabels, questionLabels) {\n      console.log(\"adding labels...\");\n      for (const labelObject of addedLabels) {\n        const id = await this.$store.dispatch(\n          \"addNewLabelToTeamLabels\",\n          labelObject.label\n        );\n        const index = questionLabels.findIndex(\n          (label) => label.label === labelObject.label\n        );\n\n        if (index !== -1) {\n          // Aktualisiere die ID des Labels\n          questionLabels[index].id = id;\n        }\n      }\n      return questionLabels;\n    },\n\n    toggleLabel(labelName) {\n      if (this.questionLabels.includes(labelName)) {\n        this.questionLabels = this.questionLabels.filter(\n          (label) => label !== labelName\n        );\n      } else {\n        this.questionLabels.push(labelName);\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.container {\n  max-width: 500px;\n  margin: 5rem auto auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 0.5rem;\n}\n\nh2 {\n  text-align: center;\n}\n\n.answer-label {\n  font-size: 18px;\n}\n\n.question-input-wrapper {\n  margin-top: 20px;\n  display: flex;\n  align-items: center;\n}\n\ninput[type=\"text\"] {\n  flex: 1;\n  font-size: 16px;\n  padding: 8px;\n  margin-left: 10px;\n  margin-right: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.option-input-wrapper {\n  display: flex;\n  grid-template-columns: auto 1fr; /* data und Eingabe in einer Zeile mit Grid-Layout */\n  align-items: center;\n  margin-left: 10px;\n  margin-right: 10px;\n}\n\n.label-list {\n  display: flex;\n  flex-wrap: wrap; /* Labels in mehreren Zeilen anzeigen */\n  align-items: center; /* Vertikal ausrichten */\n  margin-top: 10px; /* Abstand oben */\n}\n\n.label-wrapper {\n  margin-right: 10px; /* Abstand zwischen den Labels */\n}\n</style>\n","import { render } from \"./UploadView.vue?vue&type=template&id=47c7dfd6&scoped=true\"\nimport script from \"./UploadView.vue?vue&type=script&lang=js\"\nexport * from \"./UploadView.vue?vue&type=script&lang=js\"\n\nimport \"./UploadView.vue?vue&type=style&index=0&id=47c7dfd6&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-47c7dfd6\"]])\n\nexport default __exports__"],"names":["_createElementVNode","onClick","_cache","$event","$setup","selectedComponent","_createBlock","_component_multiple_choice_question_builder","uploading","onReturnQuestion","$options","submitQuestion","_component_flash_card_builder","components","FlashCardBuilder","MultipleChoiceQuestionBuilder","setup","ref","questionText","answerOptions","text","correctAnswerIndex","isPrivateQuestion","questionLabels","addedLabels","store","useStore","isLoggedIn","computed","getters","teamLabels","getTeamLabels","displayLabels","value","concat","methods","questionObject","id","this","saveNewLabelsToTeam","console","log","$store","dispatch","addLabel","labelObject","push","submitForm","dataObj","createQuestion","forEach","answer","alert","map","index","isCorrect","label","findIndex","toggleLabel","labelName","includes","filter","__exports__","render"],"sourceRoot":""}